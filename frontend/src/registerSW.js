// Enhanced Service Worker Registration and Update Checking
// Works directly with vite-plugin-pwa generated service worker

export function setupUpdateChecker() {
  if ('serviceWorker' in navigator) {
    // Wait for page load
    window.addEventListener('load', async () => {
      try {
        // Register the service worker generated by vite-plugin-pwa
        const registration = await navigator.serviceWorker.register('/sw.js', { 
          scope: '/',
          updateViaCache: 'none' // Always check for updates, don't use cached service worker
        });
        
        console.log('✅ Service Worker registered successfully');

        // Define the update check function
        const checkForUpdates = () => {
          console.log('🔄 Checking for updates...');
          if (registration) {
            registration.update().catch(err => {
              console.log('ℹ️ Update check completed:', err.message || 'No updates');
            });
          }
        };

        // Initial update check after registration
        setTimeout(() => {
          checkForUpdates();
        }, 2000); // Wait 2 seconds after registration

        // Check for updates every 5 minutes
        setInterval(checkForUpdates, 300000); // 5 minutes

        // Check for updates when tab becomes visible
        document.addEventListener('visibilitychange', () => {
          if (!document.hidden) {
            checkForUpdates();
          }
        });

        // Check for updates on page focus
        window.addEventListener('focus', checkForUpdates);

        // Listen for updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          console.log('🆕 New version found, installing...');

          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed') {
                if (navigator.serviceWorker.controller) {
                  // New content is available, show notification and reload
                  console.log('✨ New version installed! Reloading automatically...');
                  showUpdateNotification();
                  
                  // Force the waiting service worker to become active
                  newWorker.postMessage({ type: 'SKIP_WAITING' });
                } else {
                  // First time installation
                  console.log('✅ App is ready for offline use');
                }
              }
            });
          }
        });

        // Handle controller change (when skipWaiting is used)
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          console.log('🔄 Service Worker controller changed - reloading page');
          // Reload when new service worker takes control
          window.location.reload();
        });

        // Handle messages from service worker
        navigator.serviceWorker.addEventListener('message', (event) => {
          if (event.data && event.data.type === 'SW_UPDATED') {
            console.log('🔄 Service Worker updated, reloading...');
            window.location.reload();
          }
        });

      } catch (error) {
        console.error('❌ Service Worker registration failed:', error);
      }
    });
  } else {
    console.log('ℹ️ Service Workers not supported in this browser');
  }
}

function showUpdateNotification() {
  // Create a simple toast notification
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #14B8A6;
    color: white;
    padding: 12px 24px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    z-index: 10000;
    font-family: system-ui, -apple-system, sans-serif;
    font-size: 14px;
    font-weight: 500;
    animation: slideDown 0.3s ease-out;
  `;
  notification.textContent = '🎉 App updated! Reloading...';
  
  // Add animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideDown {
      from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
      to { transform: translateX(-50%) translateY(0); opacity: 1; }
    }
  `;
  document.head.appendChild(style);
  document.body.appendChild(notification);
  
  // Remove after 2 seconds (before reload)
  setTimeout(() => {
    notification.remove();
  }, 2000);
}

export async function clearAllCaches() {
  if ('caches' in window) {
    const cacheNames = await caches.keys();
    await Promise.all(cacheNames.map((name) => caches.delete(name)));
    console.log('🗑️ All caches cleared');
  }
}

export async function checkForUpdates() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.getRegistration();
    if (registration) {
      console.log('🔍 Manual update check triggered');
      await registration.update();
    }
  }
}
